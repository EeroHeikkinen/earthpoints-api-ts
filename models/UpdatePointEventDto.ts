/* tslint:disable */
/* eslint-disable */
/**
 * Earthpoints API
 * Earthpoints API description
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    UserFromExternalPlatformDataDto,
    UserFromExternalPlatformDataDtoFromJSON,
    UserFromExternalPlatformDataDtoFromJSONTyped,
    UserFromExternalPlatformDataDtoToJSON,
} from './UserFromExternalPlatformDataDto';

/**
 * 
 * @export
 * @interface UpdatePointEventDto
 */
export interface UpdatePointEventDto {
    /**
     * The hash string is used to make sure each event will only result in points awarded once. It should be unique for each event and user, in such a way the same hashString will predictably get generated if the same event was sent again. For example, it could be the string "created-pledge-page" followed by the user's id in another system.
     * @type {string}
     * @memberof UpdatePointEventDto
     */
    hashString?: string;
    /**
     * Already existing User UUID in the system. One of this or an email is required.
     * @type {string}
     * @memberof UpdatePointEventDto
     */
    userid?: string;
    /**
     * External platform user data. This is used to identify the correct user. If no user is found, a new user will be created and tagged with the provided external credentials.
     * @type {Array<UserFromExternalPlatformDataDto>}
     * @memberof UpdatePointEventDto
     */
    externalPlatformUserData?: Array<UserFromExternalPlatformDataDto>;
    /**
     * Email to associate the points with. If an user with this email is not found, a new user will be created. One of this or an User UUID is required.
     * @type {string}
     * @memberof UpdatePointEventDto
     */
    email?: string;
    /**
     * Icon to display in web interface (Font Awesome version 6.0.0)
     * @type {string}
     * @memberof UpdatePointEventDto
     */
    icon?: string;
    /**
     * The verb to display along with the point event in user interfaces. For example: "You connected Facebook"
     * @type {string}
     * @memberof UpdatePointEventDto
     */
    verb?: string;
    /**
     * Social platform (twitter, instagram, facebook) or other external platform where the event was awarded from
     * @type {string}
     * @memberof UpdatePointEventDto
     */
    platform?: string;
    /**
     * Message to display to the user.
     * @type {string}
     * @memberof UpdatePointEventDto
     */
    message?: string;
    /**
     * For awarding points, set this to false. Set to true if you want to consume points instead of awarding them
     * @type {boolean}
     * @memberof UpdatePointEventDto
     */
    isBurn?: boolean;
    /**
     * Number of points to award for this event.
     * @type {number}
     * @memberof UpdatePointEventDto
     */
    points?: number;
    /**
     * For displaying to the user, the related time when the points were awarded.
     * @type {Date}
     * @memberof UpdatePointEventDto
     */
    timestamp?: Date;
    /**
     * Any custom metadata
     * @type {object}
     * @memberof UpdatePointEventDto
     */
    metadata?: object;
}

export function UpdatePointEventDtoFromJSON(json: any): UpdatePointEventDto {
    return UpdatePointEventDtoFromJSONTyped(json, false);
}

export function UpdatePointEventDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdatePointEventDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hashString': !exists(json, 'hashString') ? undefined : json['hashString'],
        'userid': !exists(json, 'userid') ? undefined : json['userid'],
        'externalPlatformUserData': !exists(json, 'externalPlatformUserData') ? undefined : ((json['externalPlatformUserData'] as Array<any>).map(UserFromExternalPlatformDataDtoFromJSON)),
        'email': !exists(json, 'email') ? undefined : json['email'],
        'icon': !exists(json, 'icon') ? undefined : json['icon'],
        'verb': !exists(json, 'verb') ? undefined : json['verb'],
        'platform': !exists(json, 'platform') ? undefined : json['platform'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'isBurn': !exists(json, 'isBurn') ? undefined : json['isBurn'],
        'points': !exists(json, 'points') ? undefined : json['points'],
        'timestamp': !exists(json, 'timestamp') ? undefined : (new Date(json['timestamp'])),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function UpdatePointEventDtoToJSON(value?: UpdatePointEventDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hashString': value.hashString,
        'userid': value.userid,
        'externalPlatformUserData': value.externalPlatformUserData === undefined ? undefined : ((value.externalPlatformUserData as Array<any>).map(UserFromExternalPlatformDataDtoToJSON)),
        'email': value.email,
        'icon': value.icon,
        'verb': value.verb,
        'platform': value.platform,
        'message': value.message,
        'isBurn': value.isBurn,
        'points': value.points,
        'timestamp': value.timestamp === undefined ? undefined : (value.timestamp.toISOString()),
        'metadata': value.metadata,
    };
}

