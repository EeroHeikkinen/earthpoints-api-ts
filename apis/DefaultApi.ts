/* tslint:disable */
/* eslint-disable */
/**
 * Earthpoints API
 * Earthpoints API description
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ClientCredentialsDto,
    ClientCredentialsDtoFromJSON,
    ClientCredentialsDtoToJSON,
    ClientCredentialsResponseDto,
    ClientCredentialsResponseDtoFromJSON,
    ClientCredentialsResponseDtoToJSON,
    CreatePlatformConnectionDto,
    CreatePlatformConnectionDtoFromJSON,
    CreatePlatformConnectionDtoToJSON,
    CreatePointEventDto,
    CreatePointEventDtoFromJSON,
    CreatePointEventDtoToJSON,
    CreatePointEventResponseDto,
    CreatePointEventResponseDtoFromJSON,
    CreatePointEventResponseDtoToJSON,
    CreateUserDto,
    CreateUserDtoFromJSON,
    CreateUserDtoToJSON,
    UpdatePointEventDto,
    UpdatePointEventDtoFromJSON,
    UpdatePointEventDtoToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserFromExternalPlatformDataDto,
    UserFromExternalPlatformDataDtoFromJSON,
    UserFromExternalPlatformDataDtoToJSON,
} from '../models';

export interface AppControllerCreateRequest {
    createPointEventDto: CreatePointEventDto;
}

export interface AppControllerLoginWithClientCredentialsRequest {
    clientCredentialsDto: ClientCredentialsDto;
}

export interface EmailTemplateControllerCreateRequest {
    day: string;
    type: string;
    body: object;
}

export interface EmailTemplateControllerEditByDayRequest {
    day: string;
    type: string;
}

export interface PlatformConnectionControllerCreateRequest {
    createPlatformConnectionDto: CreatePlatformConnectionDto;
}

export interface PlatformConnectionControllerFindOneRequest {
    id: string;
}

export interface PlatformConnectionControllerRemoveRequest {
    id: string;
}

export interface PlatformConnectionControllerUpdateRequest {
    id: string;
    body: object;
}

export interface PointEventControllerFindOneRequest {
    id: string;
}

export interface PointEventControllerRemoveRequest {
    id: string;
}

export interface PointEventControllerUpdateRequest {
    id: string;
    updatePointEventDto: UpdatePointEventDto;
}

export interface UserControllerCreateRequest {
    createUserDto: CreateUserDto;
}

export interface UserControllerFindOneRequest {
    id: string;
}

export interface UserControllerFindOneByEmailRequest {
    email: string;
}

export interface UserControllerRemoveRequest {
    id: string;
}

export interface UserControllerUpdateRequest {
    id: string;
    body: object;
}

export interface UserControllerUserFromExternalPlatformDataRequest {
    userFromExternalPlatformDataDto: UserFromExternalPlatformDataDto;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async appControllerCreateRaw(requestParameters: AppControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreatePointEventResponseDto>> {
        if (requestParameters.createPointEventDto === null || requestParameters.createPointEventDto === undefined) {
            throw new runtime.RequiredError('createPointEventDto','Required parameter requestParameters.createPointEventDto was null or undefined when calling appControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/point-event`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePointEventDtoToJSON(requestParameters.createPointEventDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePointEventResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async appControllerCreate(requestParameters: AppControllerCreateRequest, initOverrides?: RequestInit): Promise<CreatePointEventResponseDto> {
        const response = await this.appControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appControllerDashboardRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerDashboard(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerDashboardRaw(initOverrides);
    }

    /**
     */
    async appControllerFacebookConnectRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connect/facebook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerFacebookConnect(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerFacebookConnectRaw(initOverrides);
    }

    /**
     */
    async appControllerFacebookConnectRedirectRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/callback/facebook/connect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerFacebookConnectRedirect(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerFacebookConnectRedirectRaw(initOverrides);
    }

    /**
     */
    async appControllerFacebookLoginRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/login/facebook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerFacebookLogin(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerFacebookLoginRaw(initOverrides);
    }

    /**
     */
    async appControllerFacebookLoginRedirectRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/callback/facebook/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerFacebookLoginRedirect(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerFacebookLoginRedirectRaw(initOverrides);
    }

    /**
     */
    async appControllerInstagramConnectRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connect/instagram`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerInstagramConnect(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerInstagramConnectRaw(initOverrides);
    }

    /**
     */
    async appControllerInstagramConnectRedirectRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/callback/instagram/connect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerInstagramConnectRedirect(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerInstagramConnectRedirectRaw(initOverrides);
    }

    /**
     */
    async appControllerInstagramLoginRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/login/instagram`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerInstagramLogin(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerInstagramLoginRaw(initOverrides);
    }

    /**
     */
    async appControllerInstagramLoginRedirectRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/callback/instagram/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerInstagramLoginRedirect(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerInstagramLoginRedirectRaw(initOverrides);
    }

    /**
     */
    async appControllerLandingRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/landing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerLanding(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerLandingRaw(initOverrides);
    }

    /**
     */
    async appControllerLoginWithClientCredentialsRaw(requestParameters: AppControllerLoginWithClientCredentialsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ClientCredentialsResponseDto>> {
        if (requestParameters.clientCredentialsDto === null || requestParameters.clientCredentialsDto === undefined) {
            throw new runtime.RequiredError('clientCredentialsDto','Required parameter requestParameters.clientCredentialsDto was null or undefined when calling appControllerLoginWithClientCredentials.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/oauth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientCredentialsDtoToJSON(requestParameters.clientCredentialsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientCredentialsResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async appControllerLoginWithClientCredentials(requestParameters: AppControllerLoginWithClientCredentialsRequest, initOverrides?: RequestInit): Promise<ClientCredentialsResponseDto> {
        const response = await this.appControllerLoginWithClientCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appControllerLogoutRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerLogout(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerLogoutRaw(initOverrides);
    }

    /**
     */
    async appControllerPointBadgeRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/point-badge`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerPointBadge(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerPointBadgeRaw(initOverrides);
    }

    /**
     */
    async appControllerSseRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerSse(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerSseRaw(initOverrides);
    }

    /**
     */
    async appControllerTwitterConnectRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connect/twitter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerTwitterConnect(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerTwitterConnectRaw(initOverrides);
    }

    /**
     */
    async appControllerTwitterConnectRedirectRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/callback/twitter/connect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerTwitterConnectRedirect(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerTwitterConnectRedirectRaw(initOverrides);
    }

    /**
     */
    async appControllerTwitterLoginRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/login/twitter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerTwitterLogin(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerTwitterLoginRaw(initOverrides);
    }

    /**
     */
    async appControllerTwitterLoginRedirectRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/callback/twitter/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerTwitterLoginRedirect(initOverrides?: RequestInit): Promise<void> {
        await this.appControllerTwitterLoginRedirectRaw(initOverrides);
    }

    /**
     */
    async emailTemplateControllerCreateRaw(requestParameters: EmailTemplateControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.day === null || requestParameters.day === undefined) {
            throw new runtime.RequiredError('day','Required parameter requestParameters.day was null or undefined when calling emailTemplateControllerCreate.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling emailTemplateControllerCreate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling emailTemplateControllerCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/email-template/{day}`.replace(`{${"day"}}`, encodeURIComponent(String(requestParameters.day))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async emailTemplateControllerCreate(requestParameters: EmailTemplateControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.emailTemplateControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async emailTemplateControllerEditByDayRaw(requestParameters: EmailTemplateControllerEditByDayRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.day === null || requestParameters.day === undefined) {
            throw new runtime.RequiredError('day','Required parameter requestParameters.day was null or undefined when calling emailTemplateControllerEditByDay.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling emailTemplateControllerEditByDay.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/email-template/{day}`.replace(`{${"day"}}`, encodeURIComponent(String(requestParameters.day))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async emailTemplateControllerEditByDay(requestParameters: EmailTemplateControllerEditByDayRequest, initOverrides?: RequestInit): Promise<void> {
        await this.emailTemplateControllerEditByDayRaw(requestParameters, initOverrides);
    }

    /**
     */
    async emailTemplateControllerIndexRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/email-template`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async emailTemplateControllerIndex(initOverrides?: RequestInit): Promise<void> {
        await this.emailTemplateControllerIndexRaw(initOverrides);
    }

    /**
     */
    async platformConnectionControllerCreateRaw(requestParameters: PlatformConnectionControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createPlatformConnectionDto === null || requestParameters.createPlatformConnectionDto === undefined) {
            throw new runtime.RequiredError('createPlatformConnectionDto','Required parameter requestParameters.createPlatformConnectionDto was null or undefined when calling platformConnectionControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/platform-connection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePlatformConnectionDtoToJSON(requestParameters.createPlatformConnectionDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async platformConnectionControllerCreate(requestParameters: PlatformConnectionControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.platformConnectionControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async platformConnectionControllerFindAllRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/platform-connection`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async platformConnectionControllerFindAll(initOverrides?: RequestInit): Promise<void> {
        await this.platformConnectionControllerFindAllRaw(initOverrides);
    }

    /**
     */
    async platformConnectionControllerFindOneRaw(requestParameters: PlatformConnectionControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling platformConnectionControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/platform-connection/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async platformConnectionControllerFindOne(requestParameters: PlatformConnectionControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.platformConnectionControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async platformConnectionControllerRemoveRaw(requestParameters: PlatformConnectionControllerRemoveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling platformConnectionControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/platform-connection/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async platformConnectionControllerRemove(requestParameters: PlatformConnectionControllerRemoveRequest, initOverrides?: RequestInit): Promise<void> {
        await this.platformConnectionControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async platformConnectionControllerUpdateRaw(requestParameters: PlatformConnectionControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling platformConnectionControllerUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling platformConnectionControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/platform-connection/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async platformConnectionControllerUpdate(requestParameters: PlatformConnectionControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.platformConnectionControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pointEventControllerFindAllRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/point-event`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pointEventControllerFindAll(initOverrides?: RequestInit): Promise<void> {
        await this.pointEventControllerFindAllRaw(initOverrides);
    }

    /**
     */
    async pointEventControllerFindOneRaw(requestParameters: PointEventControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pointEventControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/point-event/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pointEventControllerFindOne(requestParameters: PointEventControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.pointEventControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pointEventControllerRemoveRaw(requestParameters: PointEventControllerRemoveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pointEventControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/point-event/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pointEventControllerRemove(requestParameters: PointEventControllerRemoveRequest, initOverrides?: RequestInit): Promise<void> {
        await this.pointEventControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pointEventControllerUpdateRaw(requestParameters: PointEventControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pointEventControllerUpdate.');
        }

        if (requestParameters.updatePointEventDto === null || requestParameters.updatePointEventDto === undefined) {
            throw new runtime.RequiredError('updatePointEventDto','Required parameter requestParameters.updatePointEventDto was null or undefined when calling pointEventControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point-event/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePointEventDtoToJSON(requestParameters.updatePointEventDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pointEventControllerUpdate(requestParameters: PointEventControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.pointEventControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerCreateRaw(requestParameters: UserControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createUserDto === null || requestParameters.createUserDto === undefined) {
            throw new runtime.RequiredError('createUserDto','Required parameter requestParameters.createUserDto was null or undefined when calling userControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDtoToJSON(requestParameters.createUserDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerCreate(requestParameters: UserControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.userControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerFindOneRaw(requestParameters: UserControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerFindOne(requestParameters: UserControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.userControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerFindOneByEmailRaw(requestParameters: UserControllerFindOneByEmailRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling userControllerFindOneByEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/byEmail/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerFindOneByEmail(requestParameters: UserControllerFindOneByEmailRequest, initOverrides?: RequestInit): Promise<void> {
        await this.userControllerFindOneByEmailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerRemoveRaw(requestParameters: UserControllerRemoveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerRemove(requestParameters: UserControllerRemoveRequest, initOverrides?: RequestInit): Promise<void> {
        await this.userControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerUpdateRaw(requestParameters: UserControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerUpdate(requestParameters: UserControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.userControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerUserFromExternalPlatformDataRaw(requestParameters: UserControllerUserFromExternalPlatformDataRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userFromExternalPlatformDataDto === null || requestParameters.userFromExternalPlatformDataDto === undefined) {
            throw new runtime.RequiredError('userFromExternalPlatformDataDto','Required parameter requestParameters.userFromExternalPlatformDataDto was null or undefined when calling userControllerUserFromExternalPlatformData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/user/fromExternalPlatformData`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserFromExternalPlatformDataDtoToJSON(requestParameters.userFromExternalPlatformDataDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async userControllerUserFromExternalPlatformData(requestParameters: UserControllerUserFromExternalPlatformDataRequest, initOverrides?: RequestInit): Promise<User> {
        const response = await this.userControllerUserFromExternalPlatformDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
